c
p[:add_to_select_class]
p['add_to_select_class']
p
c
exit
ENV['ICONTRACT_PROTOCOL']
ENV['USERS_PRODUCTION_DATABASE']
ENV["USERS_PRODUCTION_DATABASE"]
ENV["USERS_DEVELOPMENT_DATABASE"]
YAML.load( ERB.new( File.read('config/database.yml')).result )
ERB.new( File.read('config/database.yml')).result
c
event.save(validate: false)
event.save
event
c
e=Event.unscoped.find(8).reminder_id
e=Event.unscoped.find(8).reminder.unscoped
e=Event.unscoped.find(8).reminder
e=Event.unscoped.where(id:8).first.reminder
e=Event.unscoped.where(id:8).first.reminder_id
e=Event.unscoped.find(8).reminder_id
e=Event.unscoped.find(8).reminder
e=Event.unscoped.find(8)
event.reminder_id
event.reminder
event
event.save
event
n
c
event
Event.unscoped.find(54)
Event.find(54).unscoped
Event.find(54)
event[0].save(validate: false)
event[0].save(vaildate: false)
event[0].save!(vaildate: false)
event[0].save!
event
event.id
Event.find(54)
@event
event
event[0].save
event[0]
event
event.save
event
event = Event.unscoped.where(id: 54).update(deleted_at: DateTime.now)
c
Event.unscoped.where(id: 54).update(deleted_at: DateTime.now)
Event.unscoped.update(deleted_at: DateTime.now)
Event.find(54).unscoped.reminder
Event.find(54).reminder.unscoped
Event.find(54).reminder_id
Event.find(54).reminder
Event.unscoped.find(54).reminder
Event.unscoped.find(54).reminder_id
Event.find(54).reminder_id
Event.find(54).reminder
Event.find(54)
@event.reminder
@event
@event.update(deleted_at: '08.12.2017')
@event.update(deleted_at: '08.12.2017', reminder_id: 4)
@event.update(deleted_at: DateTime.now, reminder_id: 4)
@event.update(deleted_at: DateTime.now, reminder_id: 4).explain
@event.update(deleted_at: DateTime.now, reminder_id: 4)
@event.reminder
@event.reminder_id
@event.update(to_send: false)
@event
@event.reminder_id
@event.update(deleted_at: DateTime.now, reminder_id: @event.reminder_id)
@event.update(deleted_at: DateTime.now)
@event.reminder_id
@event
c
@reminde[Fpdate(deleted_at: DateTime.now, event_id:4)
@reminder.update(deleted_at: DateTime.now, event_id:4)
Reminder.unscoped.find(4)
Reminder.find(4)
@event.reminder_id
@event.reminder.unscoped
@event.reminder
@event.unscoped.reminder
@event
@event.reminder
c
@event.reminder
@event
@event.reminder
c
@event.reminder
@event.reminder_id
@event.reminder
@event.reminder.unscoped
@event.reminder
@event
Event
@event.update!(deleted_at: DateTime.now)
@event.update(deleted_at: DateTime.now)
@current_user.can_delete_events?
DateTime.now
@event
c
n
@event
c
n
c
n
@current_user.can_edit_users?
@current_user.can_edit_users&
@current_user.is_admin
@current_user
c
 c
c
self.increment!(:sent_times, 1)
self.update(sent_times: 0)
Event.find(50)
self.update(sent_times: sent_times+1)
update
save
Event.find(50)
self.save
self.save!
id
Event.find(50)
Events.find(50)
sent_times
n
sent_times
c
reminder_params
params
c
reminder_params
params
c
params.methods
params.class
params
rarams
c
@contract.from_date.to_s
@contract.from_date.class
@contract.from_date
@contract
c
@akt.from_date.class
@akt.from_date
@akt
c
@akts.first
@akts.all
@akts
c
res
c
n
email_to
res
c
n
User.find(::ADMIN_ID).email
User.find(::ADMIN_ID).first.email
email_to
c
с
::ADMIN_ROLE_ID
::ADMIN_ID
c
self
c
self
c
self
self.class
self
self.methods
self
self.class
class
class_eval "notify_user_id = 4"
self.class
class
methods
class_variables
instance_variables
list
self
instance_eval "notify_user_id = 4"
self
self.notify_user_id = 4
self
@notify_user_id
self
n
@notify_user_id
n
@notify_user_id
notify_user_id
c
arguments
exit
queue_name
self.public_methods
self.private_methods
self.public_methods
self.instance_variables
self.methods
arguments
c
@arguments
@rrguments
self.instance_variables
self.methods
arguments
c
arguments
c
n
c
arguments[3].id
self.arguments[3].id
self.arguments[3]
self.arguments[2]
self.arguments[0]
self.arguments
self.arguments\
self.arguments.to_json
self.arguments.methods
self.arguments.event
self.arguments
self
c
self.arguments
self.methods
current_user
@current_user
current_user
User.first
c
e.instance_of?
e.instance_of
e.message
e.methods
e
list
pry
help
where
